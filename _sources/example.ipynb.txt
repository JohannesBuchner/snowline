{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tutorial\n",
    "================\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quickstart\n",
    "-------------\n",
    "\n",
    "Here is how to fit a simple likelihood function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "paramnames = ['Hinz', 'Kunz']\n",
    "\n",
    "def loglike(z):\n",
    "    return -0.5 * (((z - 0.5) / 0.01)**2).sum()\n",
    "\n",
    "def transform(x):\n",
    "    return 10. * x - 5.\n",
    "\n",
    "from snowline import ReactiveImportanceSampler\n",
    "\n",
    "sampler = ReactiveImportanceSampler(paramnames, loglike, transform)\n",
    "\n",
    "sampler.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This gave us error estimates and even estimated the evidence (Z)!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Loglikelihood was called %d times.\" % sampler.results['ncall'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualisation\n",
    "--------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import corner\n",
    "corner.corner(sampler.results['samples'], labels=paramnames, show_titles=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Advanced usage\n",
    "-----------------------\n",
    "\n",
    "Lets try a function that cannot be described by a simple gaussian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "paramnames = ['Hinz', 'Kunz'] #, 'Fuchs', 'Gans', 'Hofer']\n",
    "\n",
    "def loglike_rosen(theta):\n",
    "    a = theta[:-1]\n",
    "    b = theta[1:]\n",
    "    return -2 * (100 * (b - a**2)**2 + (1 - a)**2).sum()\n",
    "\n",
    "def transform_rosen(u):\n",
    "    return u * 20 - 10\n",
    "\n",
    "sampler = ReactiveImportanceSampler(paramnames, loglike_rosen, transform=transform_rosen)\n",
    "sampler.run(min_ess=1000, max_ncalls=1000000)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This already took quite a bit more effort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Loglikelihood was called %d times.\" % sampler.results['ncall'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets see how well it did:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from getdist import MCSamples, plots\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "samples_g = MCSamples(samples=sampler.results['samples'],\n",
    "                       names=sampler.results['paramnames'],\n",
    "                       label='Gaussian',\n",
    "                       settings=dict(smooth_scale_2D=3), sampler='nested')\n",
    "\n",
    "mcsamples = [samples_g]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "x = np.linspace(-0.5, 4, 100)\n",
    "a, b = np.meshgrid(x, x)\n",
    "z = -2 * (100 * (b - a**2)**2 + (1 - a)**2)\n",
    "\n",
    "g = plots.get_single_plotter()\n",
    "g.plot_2d(mcsamples, paramnames)\n",
    "plt.contour(a, b, z, [-3, -2, -1], cmap='Reds')\n",
    "plt.xlim(-0.5, 2)\n",
    "plt.ylim(-0.5, 4);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, the importance sampler was not able to perfectly follow the rosenbrock curvature. But it is a good start to roughly understand the uncertainties!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from getdist import MCSamples, plots\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "samples_g = MCSamples(samples=sampler.results['samples'],\n",
    "                       names=sampler.results['paramnames'],\n",
    "                       label='Gaussian',\n",
    "                       settings=dict(smooth_scale_2D=3), sampler='nested')\n",
    "\n",
    "mcsamples = [samples_g]\n",
    "\n",
    "g = plots.get_subplot_plotter(width_inch=8)\n",
    "g.settings.num_plot_contours = 3\n",
    "g.triangle_plot(mcsamples, filled=False, contour_colors=plt.cm.Set1.colors)\n",
    "\n",
    "#corner.corner(sampler.results['samples'], labels=sampler.results['paramnames'], show_titles=True);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
